/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <220>;
    flavor = "balanced";
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    hold-trigger-key-positions = <>;
};

&mt {
    quick_tap_ms = <220>;
    tapping-term-ms = <280>;
    flavor = "balanced";
    require-prior-idle-ms = <150>;
    hold-trigger-key-positions = <>;
};

/ {
    macros {
        en: en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(E))) &to 0>;
            label = "EN";
        };

        ru: ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(R))) &to 2>;
            label = "RU";
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "BRACES";
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        en_first {
            // ------------------------------------------------------------------------------------------------
            //| LGUI/] |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | RGUI/[ | 
            //| CTRL/` |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | CTRL/' |
            //| LALT/\ |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT/- |
            //                             | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
&bootloader    &none             &kp U               &kp F           &none        &none  &none  &none        &kp G            &kp Y                &none        &bootloader
&bt BT_CLR     &mt LEFT_SHIFT A  &mt LEFT_COMMAND R  &mt LEFT_ALT S  &mt LCTRL T  &none  &none  &mt RCTRL N  &mt RIGHT_ALT E  &mt RIGHT_COMMAND I  &mt RSHFT O  &bt BT_SEL 0
&bt BT_DISC 0  &kp P             &kp M               &kp C           &kp D        &none  &none  &kp H        &kp L            &kp W                &kp B        &bt BT_NXT
                                                     &kp BACKSPACE   &sl 1        &none         &none        &mt LSHFT SPACE  &lt 4 RETURN
            >;
        };

        en_second {
            // -----------------------------------------------------------------------------------------
            //| BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR |
            //| BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //|pwrOFF|NUMLK|     |     |     |     |   |     |     |     |     |     |      |
            //                   |     |     |     |   |     |     |     |

            bindings = <
&bootloader  &none        &kp TAB             &kp ESCAPE      &none        &none   &none  &none          &kp EQUAL             &kp MINUS                 &none              &bootloader
&none        &mt LSHFT Q  &mt LEFT_COMMAND Z  &mt LEFT_ALT X  &mt LCTRL V  &none   &none  &mt RCTRL J    &mt RIGHT_ALT COMMA   &mt RIGHT_COMMAND PERIOD  &mt RIGHT_SHIFT K  &none
&none        &en          &ru                 &kp SLASH       &kp SQT      &none   &none  &kp SEMICOLON  &kp BACKSLASH         &kp GRAVE                 &braces            &none
                                              &trans          &none        &trans         &trans         &mt LEFT_SHIFT SPACE  &lt 4 RETURN
            >;
        };

        ru_first {
            bindings = <
&bootloader  &none             &kp S               &kp R           &none               &none  &none  &none                &kp V                  &kp M                &none              &bootloader
&none        &mt LEFT_SHIFT F  &mt LEFT_COMMAND B  &mt LEFT_ALT J  &mt LEFT_CONTROL T  &none  &none  &mt RIGHT_CONTROL Y  &mt RIGHT_ALT N        &mt RIGHT_COMMAND C  &mt RIGHT_SHIFT H  &none
&none        &kp G             &kp U               &kp E           &kp D               &none  &none  &kp K                &kp Z                  &kp P                &kp L              &none
                                                   &kp BACKSPACE   &sl 3               &none         &none                &mt RIGHT_SHIFT SPACE  &lt 4 RET
            >;
        };

        ru_second {
            bindings = <
&bootloader  &none        &kp TAB                     &kp ESCAPE             &none               &none  &none  &none                &kp EQUAL                &kp MINUS                &none              &bootloader
&none        &mt LSHFT W  &mt LEFT_COMMAND SEMICOLON  &mt LALT LEFT_BRACKET  &mt LEFT_CONTROL X  &none  &none  &mt RIGHT_CONTROL Q  &mt RIGHT_ALT LS(SLASH)  &mt RIGHT_COMMAND SLASH  &mt RIGHT_SHIFT I  &none
&none        &en          &ru                         &kp BACKSLASH          &kp SQT             &none  &none  &kp O                &kp COMMA                &kp A                    &kp DOT            &none
                                                      &none                  &none               &none         &none                &mt LEFT_SHIFT SPACE     &lt 4 RET
            >;
        };

        sys {
            bindings = <
&bootloader  &none                    &kp N0                     &kp N1                 &none                 &none  &none  &none              &mt C_BRIGHTNESS_INC C_VOLUME_UP  &mt C_BRI_DEC C_VOL_DN  &none      &bootloader
&none        &mt LEFT_SHIFT NUMBER_2  &mt LEFT_COMMAND NUMBER_3  &mt LEFT_ALT NUMBER_4  &mt LEFT_CONTROL N5   &none  &none  &kp LEFT           &kp UP                            &kp DOWN                &kp RIGHT  &none
&none        &kp N6                   &kp N7                     &kp N8                 &kp N9                &none  &none  &kp RIGHT_BRACKET  &kp C_AC_SCROLL_UP                &kp C_AC_SCROLL_DOWN    &kp GRAVE  &none
                                                                 &kp BACKSPACE          &mt LEFT_SHIFT SPACE  &none         &none              &none                             &none
            >;
        };
    };
};
